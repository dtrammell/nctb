#!/usr/bin/ruby

# Use this version of the Cryptomnio gem or things will break!
gem 'cryptomnio', '=0.0.2.pre'

# Requirements
require 'cryptomnio'
require 'date'
require 'pp'
require 'syslog'
require 'twitter'
require 'yaml'

##
# Global Constants

# Verbosity level: 0 is silent | 1 is normal (syslog) | 2+ is DEBUG output (syslog + console)
VERBOSITY = 3

# TCTBot Class
class TCTBot

	##
	# Instance Constants

	# The application's Name
	APPNAME = "TCTBot"
	# The application's Version
	VERSION = "0.1.4"
	# The application's working directory within the user's home directory
	WORKING_DIR = Dir.home + '/.tctb/'
	# SPEEDMODE causes the bot to run in a compressed timeframe, 1 min == 1 sec
	SPEEDMODE = false

	# Initialization
	def initialize
		# Signal Traps
		Signal.trap('INT') {
			self.shutdown
			exit
		}
		Signal.trap('TERM') {
			self.shutdown
			exit
		}

		# Open Syslog
		Syslog.open(APPNAME, Syslog::LOG_CONS|Syslog::LOG_PID, Syslog::LOG_DAEMON)

		# Log application startup
		Syslog.info("%s v.%s Startup", APPNAME, VERSION)

		# Check for application home directory and create it if missing
		pathname = Pathname.new( WORKING_DIR )
		if ! pathname.exist?
			# Create any missing path
			Syslog.warning( "Working directory '%s' does not exist... creating." )
			filename.mkpath
		end

		# Load the configuration file
		@configfile = self.load_config

		# Shorter variable names for frequently used config variables
		@exchange     = @configfile[:cryptomnio][:exchange]
		@starting_base = @configfile[:starting_btc]
		@starting_quot = @configfile[:starting_usd]

		# Load persistent state file
		self.load_state

		# Load the Influencers databases
		@influencers_day   = load_influencers('influencers_day.dat')
		@influencers_week  = load_influencers('influencers_week.dat')
		@influencers_month = load_influencers('influencers_month.dat')
		@influencers_all   = load_influencers('influencers_all.dat')
		
		# Global Variables Initialization
		@shutdown              = false
		@time                  = Time.now
		$minute                = 1
		@votes_min             = 3
		@persist[:lastmin]   ||= @time.min
		@persist[:dots]        = ""
		@persist[:lastmonth] ||= @time.month
		self.save_state
	end

	# Graceful Shutdown - Calls save_state and save_influencers for all influencer databases
	def shutdown
		message = "Shutting down..."
		Syslog.info( message )
		puts message if VERBOSITY >= 2

		# Save persistent state variables
		self.save_state

		# Save influencers databasees
		self.save_influencers( :day,   @influencers_day   )
		self.save_influencers( :week,  @influencers_week  )
		self.save_influencers( :month, @influencers_month )
		self.save_influencers( :all,   @influencers_all   )

		# Return
		return true
	end

	# Read YAML Configuration File into config data structure
	def load_config
		filename = Pathname.new( WORKING_DIR + 'tctb.config' )
		raise "Config File '%s' NOT FOUND" % filename if ! filename.exist?
		configfile = YAML.load( File.open( filename ).read )
		Syslog.info( "Configuration loaded from '%s':" % filename )
		pp configfile.inspect if VERBOSITY >= 2
		return configfile
	rescue Errno::ENOENT => e
		message = "Config File '%s' NOT FOUND" % filename
		Syslog.err( message )
		puts message
		puts e.message
		puts e.backtrace if VERBOSITY >= 2
		exit
	end

	# Load YAML file for persistent state variables
	def load_state
		filename = Pathname.new( WORKING_DIR + 'tctb.state' )
		if ! filename.exist?
			# File doesn't exist, initialize it
			message = "WARNING: State File '%s' NOT FOUND; Initializing" % filename
			Syslog.warning( message )

			# Initialize the persistent state hash and save it to YAML file
			@persist = {}
			self.save_state
		else
			# Load the persistent state hash from YAML file
			@persist = YAML.load( File.open( filename ).read )

			# Output
			if VERBOSITY >= 1
				message = "Persistent State loaded from '%s':" % filename
				Syslog.info( message )
				if VERBOSITY >= 2
					puts message
					pp @persist.inspect
				end
			end

			return true 
			exit
		end
	rescue Errno::ENOENT => e
		message = "State File '%s' NOT FOUND" % filename
		Syslog.err( message )
		puts message
		puts e.message
		puts e.backtrace if VERBOSITY >= 2
		exit
	end

	# Save YAML file for persistent state variables
	def save_state
		filename = Pathname.new( WORKING_DIR + 'tctb.state' )
		File.open( filename, 'w' ) {|f| f.write @persist.to_yaml }
		return true
	rescue => e
		message = "Error: %s" % e.message
		Syslog.err( message )
		puts message
		puts e.message
		puts e.backtrace if VERBOSITY >= 2
		exit
	end

	# Load the influencers databases from the filesystem
	def load_influencers( filename )
# TODO: Connect to Database for influencers and voting statistics
		filename = Pathname.new( WORKING_DIR + filename )
		if ! filename.exist?
			# File doesn't exist, initialize it
			message = "Warning: Influencers File '%s' NOT FOUND; Initializing" % filename
			Syslog.warning( message )
			# Write empty influencers hash to file
			influencers = {}
			File.open(filename, 'w') {|f| f.write influencers.to_yaml }
			# Return empty influencers hash
			return influencers
		else
			# Load influencers into a hash
			influencers = YAML.load( File.open( filename ).read )
			message = "Loaded Influencers File '%s' (%d records)" % [ filename, influencers.count ] 
			Syslog.info( message )
			if VERBOSITY >= 2
				puts "%s:" % filename
				pp influencers.inspect
			end
			return influencers
		end
	rescue => e
		message = "Error: %s" % e.message
		Syslog.err( message )
		puts message
		puts e.message
		puts e.backtrace if VERBOSITY >= 2
		exit
	end

	# Save the influencers databases to the filesystem
	def save_influencers( timeframe, influencers )
		case timeframe
			when :day
				filename = Pathname.new( WORKING_DIR + 'influencers_day.dat' )
			when :week
				filename = Pathname.new( WORKING_DIR + 'influencers_week.dat' )
			when :month
				filename = Pathname.new( WORKING_DIR + 'influencers_month.dat' )
			else
				filename = Pathname.new( WORKING_DIR + 'influencers_all.dat' )
		end

		File.open(filename, 'w') {|f| f.write influencers.to_yaml }

		return influencers.count # success: return # of entries saved
	rescue => e
		message = "Error: %s" % e.message
		Syslog.err( message )
		puts message
		puts e.message
		puts e.backtrace if VERBOSITY >= 2
		exit
	end

	# Extract a leaderboard with <entries> number of users from timeframe's database
	def get_leaderboard( timeframe, entries )
		case timeframe
			when :day
				hash = @influencers_day
			when :week
				hash = @influencers_week
			when :month
				hash = @influencers_month
			else
				hash = @influencers_all
		end

		leaders = hash.sort_by {|key, value| value }.reverse
		return leaders[0..4]
	end

	# Twitter.update wrapper to add length checking and debug output. Tweets <tweet>, optionally in reply to <in_reply_to_status_id>
	def tweet( tweet, in_reply_to_status_id: nil )
		# Check to ensure that the tweet isn't too long
		if tweet.length > 280
			message = "ERROR: Poll tweet too long! (%d characters)" % tweet.length
			Syslog.err( message )
			raise message
		end

		# DEBUG Output
		puts "Tweeting:\n'''\n%s\n'''" % tweet if VERBOSITY >= 2

		# Tweet the tweet and save the tweet as the last tweet
		@persist[:lasttweet] = @twitter.update( tweet, in_reply_to_status_id: in_reply_to_status_id ) 
		self.save_state

		# Return the tweet
		return @persist[:lasttweet]
	end

	# Update Account Balances from exchange
	def update_balances
		# Get individual balances from exchange
		@btc_balance = @cryptomnio.retrieve_venue_account_balance_symbol( 'btc' )
		@usd_balance = @cryptomnio.retrieve_venue_account_balance_symbol( 'usd' )

		# DEBUG Output
		puts "Account Balances: BTC: %s | USD: $%s" % [ @btc_balance, @usd_balance ] if VERBOSITY >= 2

		# Return hash of balances
		balances = { :btc => @btc_balance, :usd => @usd_balance }
		return balances
	rescue => e
		# Not critical if this call errors, log it and return current balances
		message = "WARNING: Error when updating balances: %s" % e.message
		Syslog.warning( message )

		# Return current hash of balances
		balances = { :btc => @btc_balance, :usd => @usd_balance }
		return balances
	end

	# Update Ticker (market price)
	def update_ticker
		# Get new ticker from exchange
		@ticker = @cryptomnio.retrieve_venue_market_ticker( "btc_usd" )

		# DEBUG Output
		puts "Ticker: %s\n" % @ticker['price'] if VERBOSITY >= 2

		# Return ticker
		return @ticker
	rescue
		# Not critical if this call errors, log it and return current ticker
		message = "WARNING: Error when updating ticker: %s" % e.message
		Syslog.warning( message )

		# Return current ticker
		@ticker
	end

	# Connect the object instance to its configured Twitter account
	def connect_twitter
		# Get Twitter Handle from config
		@twitter_handle = @configfile[:twitter][:username]

		# Create Twitter client object
		twitter = Twitter::REST::Client.new do |c|
			c.consumer_key        = @configfile[:twitter][:consumer_key]
			c.consumer_secret     = @configfile[:twitter][:consumer_secret]
			c.access_token        = @configfile[:twitter][:access_token]
			c.access_token_secret = @configfile[:twitter][:access_token_secret]
		end

		# Output
		Syslog.info( "Connected to Twitter as '%s'" % @twitter_handle ) if VERBOSITY >= 1

		return twitter
	end

	# Connect the object instance to its configured Cryptomnio account
	def connect_cryptomnio
		# Create Cryptomnio client object
		cryptomnio = Cryptomnio::REST::Client.new do |c|
			c.config = {
				# API Endpoint URL
				api_host_core: @configfile[:cryptomnio][:api_host_core],
				api_host_cma:  @configfile[:cryptomnio][:api_host_cma],
				# Authentication
	      	authtype:   @configfile[:cryptomnio][:authtype],
	   	   access_key: @configfile[:cryptomnio][:access_key],
   		   secret_key: @configfile[:cryptomnio][:secret_key],
				# Venue Contexts
				contexts: []
   		}
			# Context (venue + account)
			c.config[:contexts] = {
				bitstamp: {
					venue:      @configfile[:cryptomnio][:exchange],
					accountid:  @configfile[:cryptomnio][:accountid],
					venuekeyid: @configfile[:cryptomnio][:venuekeyid]
				}
			}
		end

		# Output
		Syslog.info( "Connected to Cryptomnio (%s)" % @configfile[:cryptomnio][:exchange] ) if VERBOSITY >= 1

		# Return Cryptomnio client object
		return cryptomnio
	end

	# Main Application Routine
	def start

		# Connect Twitter
		@twitter = self.connect_twitter

		# Connect Cryptomnio
		@cryptomnio = self.connect_cryptomnio

		# Populate initial balances from exchange
		self.update_balances
		Syslog.info("Account Balances at startup: BTC: %s | USD: $%s", @btc_balance, @usd_balance ) if VERBOSITY >= 1 

		# Retireve most recent tweet (index 0 of returned Enumerable)
		# TODO: Find most recent POLL tweet, not just the most recent one (which may not be the poll)
		@persist[:lasttweet] = @twitter.user_timeline( @twitter_handle, count: 1 )[0]
		self.save_state
		Syslog.info("Most recent %s tweet at startup: \"%s...\"", @twitter_handle, @persist[:lasttweet].text[0,26]) if VERBOSITY >= 1

		# Scheduler Loop
		while @shutdown != true
			loop do	
				# Don't iterate too fast unless we're in SPEEDMODE mode
				sleep 1 if ! SPEEDMODE

				# Update to current time
				@time = Time.now

				# Save current values for conditionals later or initialize them as current
				$minute ? @persist[:lastmin]   = $minute : $minute = @time.min
				$hour   ? @persist[:lasthour]  = $hour   : $hour   = @time.hour
				$month  ? @persist[:lastmonth] = $month  : $month  = @time.month
				self.save_state

				# Check what minute of the hour it is
				if ! SPEEDMODE
					# Get the current minute if not in SPEEDMODE mode
					$second = @time.sec
					$minute = @time.min
					$hour   = @time.hour
					$day    = @time.day
			  		$month  = @time.month
					puts "\n%02d/%02d %02d:%02d" % [ $month, $day, $hour, $minute ] if VERBOSITY >= 3
				else
					# Speed through minutes (1 per second) in SPEEDMODE mode
					sleep 1
					$minute += 1
					if $minute == 60
						$minute = 0
						$hour += 1
					end
				end

				##
				# Scheduler

				# On the Month
				case
					when $month != @persist[:lastmonth] # Month Change!
						leaders = self.get_leaderboard( :month, 5 )

						tweet = "%s's Top 5 Monthly Influencers:\n\n" % @twitter_handle
						count = 0
						leaders.each do |handle, votecount|
							count += 1
							tweet << "%d: @%s with %d votes!\n" % [ count, handle, votecount ] 
						end
						self.tweet( tweet )

						# TODO: Rotate and save the monthly influencer's file for records

						# Reset the monthly influencers count for the new month
						@influencers_month = {}
						self.save_influencers( :month, @influencers_month )

						# TODO: Have the bot calculate monthly profits and distribute profits to the monthly leaderboard if they have registered a Bitcoin Address
					else
				end

				# On the Week
				case
					when @time.sunday? && $hour == 00 & $minute = 00
						leaders = self.get_leaderboard( :week, 5 )
				
						tweet = "%s's Top 5 Weekly Influencers:\n\n" % @twitter_handle
						count = 0
						leaders.each do |handle, votecount|
							count += 1
							tweet << "%d: @%s with %d votes!\n" % [ count, handle, votecount ] 
						end
						self.tweet( tweet )

						# Reset the weekly influencers count for the new week
						@influencers_week = {}
						self.save_influencers( :week, @influencers_week )

						sleep 60
				end

				# On the Hour
				case
					when $hour == 23 && $minute == 59 # Just before Midnight
						leaders = self.get_leaderboard( :day, 5 )

						tweet  = "%s's Top 5 Daily Influencers:\n" % @twitter_handle
						count = 0
						leaders.each do |handle, votecount|
							count += 1
							tweet << "%d: @%s with %d votes!\n" % [ count, handle, votecount ] 
						end
						self.tweet( tweet )

						# Reset the daily influencers count for the new day
						@influencers_day = {}
						self.save_influencers( :day, @influencers_day )

						sleep 60
				end

				# On the Minute
				case $minute

					when 00 # Minute 00: Post a new Poll
						# Refresh Account Balances
						self.update_balances

						# Get current ticker spot price
						self.update_ticker
				
						# Generate a new Poll ID
						@pollid = "%d%02d%02d%02d" % [ @time.year, @time.month, @time.day, @time.hour ]
						@pollid = @pollid.to_i

						# Post the new poll
						message = "Posting a new poll! (ID: %d)" % @pollid
						Syslog.info( message ) if VERBOSITY >= 1
						#TODO: Add last order info to this tweet
						tweet  = "Poll %d: Should I BUY, SELL, or HODL?\n\n" % @pollid
						tweet << "Current BTC/USD Spot: $%s\n\n"             % @ticker['price']
						tweet << "Balances:\n"
						tweet << "BTC: %s\n"                                 % @btc_balance
						tweet << "USD: \$%s\n\n"                             % @usd_balance
						tweet << "Reply with one keyword: BUY, SELL, or HODL. Most recent reply is your vote (so you can change your mind), multiple keywords in one reply ignored"
						self.tweet( tweet )

						# Finished with this minute's operation... sleep to ensure this doesn't get called again this hour
						sleep 60

					when 55 # Minute 55: Close the Poll
						# Retrieve most recent tweet, *should* be the last poll posted
						# TODO: Find and retrieve the most recent poll tweet instead of assuming the lasttweet is the most recent poll
						if ! @persist[:lasttweet]
							# Get the most recent tweet from Twitter
							$tweets = @twitter.user_timeline(@twitter_handle, count: 1)
							@persist[:lasttweet] = $tweets[0]
							self.save_state

							# Output
							Syslog.info( "Retrieved most recent %s tweet (poll): \"%s...\"", @twitter_handle, @persist[:lasttweet].text[0,26] ) if VERBOSITY >= 1
						end

						# Extract the Poll ID from the tweet
						@pollid = @persist[:lasttweet].text[/\b(?<!\.)\d+(?!\.)\b/, 0]
						if ! @pollid
							# Couldn't get the Poll ID, sleep past this minute and break
							Syslog.err( "Unable to retrieve Poll ID from most recent tweet! %s", @pollid.inspect )
							sleep 60
							break
						end
						@pollid = @pollid.to_i

						Syslog.info( "Closing Poll %s", @pollid ) if VERBOSITY >= 1
						if @persist[:lasttweet]
							# Get all replies to the account after our poll tweet
							query = "to:%s" % @twitter_handle
							reply_tweets = @twitter.search(query, since_id: @persist[:lasttweet].id, result_type: "recent")
							#p reply_tweets if VERBOSITY >= 3
							Syslog.debug( "Got %d replies to user." % reply_tweets.count ) if VERBOSITY >= 1
							Syslog.warning( "WARNING: Got %d replies to user, possibly more than 100 votes!" % reply_tweets.count ) if reply_tweets.count >= 100
							# TODO: Twitter only returns max 100 responses per query; loop until all replies have been collected.

							# Find subset of replies that replied directly to our poll tweet
							replies = []
							index = 0
							for tweet in reply_tweets do
								if tweet.in_reply_to_status_id == @persist[:lasttweet].id
									replies[index] = tweet
									index += 1
								end
							end

							# Reverse order so that tweets are in chronological order
							replies = replies.reverse

							Syslog.debug("Got %d replies to poll.", replies.count) if VERBOSITY >= 1
							if VERBOSITY >= 3 
								for tweet in replies do
									Syslog.debug("%s said: \"%s\"", tweet.user.screen_name, tweet.text)
								end
							end

							# Count the votes from replies
							votes = {}
							for tweet in replies do
								# Parse the tweet text for the vote keywords
								tweet.text =~ /buy/i       ? buy  = true  : buy  = false 
								tweet.text =~ /sell/i      ? sell = true  : sell = false 
								tweet.text =~ /hodl|hold/i ? hodl = true  : hodl = false 
								# Ensure that the tweet only contains one keyword
								if [buy, sell, hodl].one?
									# Add the voted keyword to the votes hash. Most recent vote per user will be counted.
									votes[tweet.user.screen_name] = "BUY"  if buy  == true
									votes[tweet.user.screen_name] = "SELL" if sell == true
									votes[tweet.user.screen_name] = "HODL" if hodl == true
								end
							end              
							Syslog.info( "Got %d votes in poll.", votes.size ) if VERBOSITY >= 1
							if VERBOSITY >= 2
								votes.each do |name, vote|
									Syslog.debug( "%s voted: \"%s\"", name, vote )
								end
							end

							# Check if we have our minimum threshold of votes. Default to HODL if not
							if votes.count < @votes_min
								Syslog.info( "Only received %d votes (minimum %d), HODL!"    % [ votes.count, @votes_min ] ) if VERBOSITY >= 1
								tweet  = "Voting closed for poll %d.\n\n"                    % @pollid
								tweet << "Not enough votes to make a decision.  HODL!!!\n\n"
								tweet << "(Need a minimum of %d votes, got %d votes... "             % [ @votes_min, votes.count ]
								tweet << "Maybe you should retweet my upcoming poll tweet?)"
								self.tweet( tweet, in_reply_to_status_id: @persist[:lasttweet].id ) 
								$decision = "HODL"
							else
								# We have enough votes!  Make some trades...
								Syslog.info( "Enough votes received, tallying the votes to make a decision!" )

								# Tally the votes
								tally = {}
								tally[:buy]  = 0
								tally[:sell] = 0
								tally[:hodl] = 0
								votes.each do |name, vote|
									tally[:buy]  += 1 if vote == "BUY"
									tally[:sell] += 1 if vote == "SELL"
									tally[:hodl] += 1 if vote == "HODL"
									# Add a vote to the name's influencers score
									@influencers_day[name]   ? @influencers_day[name]   += 1 : @influencers_day[name] 	= 1
									@influencers_week[name]  ? @influencers_week[name]  += 1 : @influencers_week[name] 	= 1
									@influencers_month[name] ? @influencers_month[name] += 1 : @influencers_month[name] = 1
									@influencers_all[name]   ? @influencers_all[name]   += 1 : @influencers_all[name] 	= 1
								end

								# Calculate relative percentages of each position
								@buy_percentage  = (tally[:buy].to_f  / votes.count) * 100 
								@sell_percentage = (tally[:sell].to_f / votes.count) * 100
								@hodl_percentage = (tally[:hodl].to_f / votes.count) * 100
								if VERBOSITY >= 2
									puts "BUY percentage:  %0.2f%%" % @buy_percentage
									puts "SELL percentage: %0.2f%%" % @sell_percentage
									puts "HODL percentage: %0.2f%%" % @hodl_percentage
								end

								# Save the updated influencers data
								save_influencers( :day,   @influencers_day   )
								save_influencers( :week,  @influencers_week  )
								save_influencers( :month, @influencers_month )
								save_influencers( :all,   @influencers_all   )

								# Find the largest number in the tally hash and return the associated key(s)
								winner = tally.reduce({}){|h,(k,v)| (h[v] ||= []) << k;h}.max
								# There can be only one:
								$decision = "HODL" #default
								if winner[1].count > 1
									# Tie!  HODL...
									message = "Result of Poll %d was a tie! I'm gonna %s. Vote Tally: [ BUY:  %d (%0.2f%%%%)| SELL: %d (%0.2f%%%%)| HODL: %d (%0.2f%%%%)]" % [@pollid, $decision, tally[:buy], @buy_percentage, tally[:sell], @sell_percentage, tally[:hodl], @hodl_percentage] # strings going to Syslog need double-escapes for format strings
									Syslog.info(message)

									tweet = "Result of Poll %d was a tie!\n\nI'm gonna %s.\n\nVote Tally:\nBUY:  %d (%0.2f%%)\nSELL: %d (%0.2f%%)\nHODL: %d (%0.2f%%)" % [@pollid, $decision, tally[:buy], @buy_percentage, tally[:sell], @sell_percentage, tally[:hodl], @hodl_percentage]
									self.tweet( tweet, in_reply_to_status_id: @persist[:lasttweet].id )
								else
									# Winner!
									$decision = "BUY"  if winner[1][0] == :buy
									$decision = "SELL" if winner[1][0] == :sell
									$decision = "HODL" if winner[1][0] == :hodl

									# Post poll results
									message = "The results for Poll %d are in! %s is the winner! Vote Tally: [ BUY: %d (%0.2f%%%%)| SELL: %d (%0.2f%%%%)| HODL: %d (%0.2f%%%%)]" % [@pollid, $decision, tally[:buy], @buy_percentage, tally[:sell], @sell_percentage, tally[:hodl], @hodl_percentage] # strings going to Syslog need double-escapes for format strings
									puts message if VERBOSITY >= 2
									Syslog.info( message.to_s )

									tweet = "The results for Poll %d are in!\n\n%s is the winner!\n\nVote Tally:\nBUY: %d (%0.2f%%)\nSELL: %d (%0.2f%%)\nHODL: %d (%0.2f%%)" % [@pollid, $decision, tally[:buy], @buy_percentage, tally[:sell], @sell_percentage, tally[:hodl], @hodl_percentage]
									self.tweet( tweet, in_reply_to_status_id: @persist[:lasttweet].id )
									self.save_state
								end

							end # if votes.count < 10
						end # if @persist[:lasttweet]

						# Execute desired trade via Cryptomnio
						case $decision
							when "BUY"
								Syslog.info("Executing MARKET BUY order via Cryptomnio...") if VERBOSITY >= 1

								# Determine @usd_percentage % of USD
								# TODO: Figure out the math here to maximize buy percentage when vote to buy is unanimous (100%)
								@buy_percentage = 90 if @buy_percentage == 100 # Need to give the bot a little wiggle room for market changes and trading fees
								balance = @usd_balance.to_f 
								$amount = (balance * (@buy_percentage / 100.0)).to_f
								message = "Have $%0.2f USD to BUY with. Spending $%0.2f (%0.2f%%%%) of it..." % [ @usd_balance, $amount, @buy_percentage ]
								Syslog.info( message ) if VERBOSITY >= 1

								# Get current ticker spot price
								self.update_ticker
								message = "Current spot price for BTC/USD on %s: \$%s" % [ @exchange, @ticker['price']]
								Syslog.info(message) if VERBOSITY >= 1
				
								# Calculate volume to buy ( $amount to spend divided by current spot price rounded to 8 decimal places )
								$volume = ( $amount / @ticker['price'].to_f ).round(8)
								message = "BUYing %0.8f BTC with $%0.2f USD." % [ $volume, $amount ]
								Syslog.info( message ) if VERBOSITY >= 1

								# Sanity check volume to make sure it's not below minimum exchange trade limits
								if $volume < 0.003
									message = "Attemtped BUY of %0.8f BTC (%0.2f%%%% of $%0.2f USD) is below Bitstamp's minimum order volume limit (0.003 BTC). Gotta HODL!!!" % [ $volume, @buy_percentage, @usd_balance ]
									Syslog.info(message)
					
									tweet = "Attempted BUY of %0.8f BTC (%0.2f%% of $%0.2f USD) is below @Bitstamp's minimum order volume limit (0.003 BTC).\n\nGotta HODL!!!" % [ $volume, @buy_percentage, @usd_balance ]
									self.tweet( tweet, in_reply_to_status_id: @persist[:lasttweet].id )

									break
								end

								# Place BID order
								message = "BUYing %0.8f BTC (%0.2f%%%% of $%0.2f USD) at MARKET" % [ $volume, @buy_percentage, balance ]
								Syslog.info(message)
								$order_id = @cryptomnio.create_venue_account_order_market( "buy", $volume, "btc_usd" )

								# Get Order Info
								sleep 15
								$order_info = @cryptomnio.retrieve_venue_account_order( $order_id )
								message = "Placed order %s at %s" % [ $order_info['venueOrderId'], @exchange ] 
								Syslog.info(message)

							when "SELL"
								Syslog.info("Executing MARKET SELL order via Cryptomnio...")

								# Calculate volume to sell ( @sell_percentage % of BTC balance rounded to 8 decimal places )
								balance = @btc_balance.to_f
								$volume = (balance * (@sell_percentage / 100.0)).round(8)
								message = "Have $%0.8f BTC to SELL. SELLing $%0.8f (%0.2f%%%%) of it..." % [ @btc_balance, $volume, @sell_percentage ]
								Syslog.info( message ) if VERBOSITY >= 1
								
								# Get current ticker spot price
								self.update_ticker
								message = "Current spot price for BTC/USD on %s: \$%s" % [ @exchange, @ticker['price']]
								Syslog.info(message) if VERBOSITY >= 1

								# Sanity check volume to make sure it's not below minimum exchange trade limits
								if $volume < 0.003
									message = "Attemtped SELL of %0.8f BTC (%0.2f%%%%) is below Bitstamp's minimum order volume limit (0.003 BTC).  Gotta HODL!!!" % [ $volume, @sell_percentage ]
									Syslog.info(message)
					
									tweet = "Attempted SELL of %0.8f BTC (%0.2f%%) is below @Bitstamp's minimum order volume limit (0.003 BTC).\n\nGotta HODL!!!" % [ $volume, @sell_percentage ]
									self.tweet( tweet, in_reply_to_status_id: @persist[:lasttweet].id )

									break
								end

								# Place ASK order
								message = "SELLing %0.8f BTC (%0.2f%%%% of %s BTC) at MARKET" % [ $volume, @sell_percentage, balance ] 
								Syslog.info(message)
								$order_id = @cryptomnio.create_venue_account_order_market( "sell", $volume, "btc_usd" )

								# Get Order Info
								sleep 15
								$order_info = @cryptomnio.retrieve_venue_account_order( $order_id )
								message = "Placed order %s at %s" % [ $order_info['venueOrderId'], @exchange ] 
								Syslog.info(message)

							else
								# HODL
								$order_id = nil
						end # case $decision

						# Perform trade follow-up tasks if a trade was executed
						if $order_id
							message = "Checking Cryptomnio order %s" % $order_id
							Syslog.info(message) if VERBOSITY >= 2

							# Wait until order clears or is otherwise closed
							while ! $order_info['venueStatus'] || $order_info['venueStatus'].downcase != 'filled' do
								if $order_info['venueStatus'] && $order_info['venueStatus'].downcase == 'cancelled'
									message = "ERROR: Order %s cancelled by exchange!" % $order_id
									Syslog.err( message )
									raise message
									break
								end
								if $order_info['cryptomnioStatus'] == 'rejected'
									message = "ERROR: Order %s rejected by Cryptomnio!" % $order_id
									Syslog.err( message )
									raise message
									break
								end
								Syslog.info( "Waiting for order %s to clear..." % $order_id )
								sleep 3
								$order_info = @cryptomnio.retrieve_venue_account_order( $order_id )
							end

							# Update ticker
							self.update_ticker

							# TODO: Get USD value of trade from trade result.  For now, we calculate it ourselves:
							usd_value = ( $order_info['quantity'].to_f * @ticker['price'].to_f ).round(2)

							# Post trade results
							Syslog.info("Tweeting trade results...")
							case $decision
								when "BUY"
								tweet  = "Trade on @Bitstamp Complete:\n\n"
								tweet << "BUY %0.2f%% of USD ($%0.2f USD): %s BTC\n"  % [ @buy_percentage, usd_value, $order_info["quantity"] ]
								tweet << "Trading fee: $%0.2f\n\n"                    % $order_info["fee"].to_f
								tweet << "Trade powered by @Blockhenge™ #Cryptomnio™"
							when "SELL"
								tweet  = "Trade on @Bitstamp Complete:\n\n"
								tweet << "SELL %0.2f%% of BTC: $%0.8f BTC (%s USD)\n" % [ @sell_percentage, $order_info["quantity"], usd_value ]
								tweet << "Trading fee: $%0.2f\n\n"                    % $order_info["fee"].to_f
								tweet << "Trade powered by @Blockhenge™ #Cryptomnio™"
							end
							self.tweet( tweet, in_reply_to_status_id: @persist[:lasttweet].id )

							# Sleep for a few seconds so balances can update via the exchange
							sleep 15

						end # if $order_id

						# Update ticker
						self.update_ticker

						# Save old balances
						@btc_balance_previous = @btc_balance
						@usd_balance_previous = @usd_balance
							
						# Refresh Account Balances
						self.update_balances
						puts "BTC Balance: %s" % @btc_balance if VERBOSITY >= 2
						puts "USD Balance: %s" % @usd_balance if VERBOSITY >= 2

						# Calculate change in balances due to most recent trade
						$btc_diff_value   = @btc_balance - @btc_balance_previous
						$usd_diff_value   = @usd_balance - @usd_balance_previous
						if $btc_diff_value == 0 && @btc_balance_previous == 0
							# Don't divide by 0
							$btc_diff_percent = 0
						else
							$btc_diff_percent = ($btc_diff_value / @btc_balance_previous) * 100 
						end
						if $usd_diff_percent == 0 && @usd_balance_previous == 0
							# Don't divide by 0
							$usd_diff_percent = 0
						else
							$usd_diff_percent = ($usd_diff_value / @usd_balance_previous) * 100 
						end

						# Calculate total account value in both BTC and USD
						$btc_total = @btc_balance + ( @usd_balance / @ticker['price'].to_f )
						puts "BTC Account Value: %s" % @btc_total if VERBOSITY >= 2
						$usd_total = @usd_balance + ( @btc_balance * @ticker['price'].to_f )
						puts "USD Account Value: %s" % @usd_total if VERBOSITY >= 2

						# Calculate change in total account value
						$btc_start_diff_value   = $btc_total - ( @starting_base + ( @starting_quot / @ticker['price'].to_f ) )
						$btc_start_diff_percent = ($btc_start_diff_value / $btc_total) * 100
						$usd_start_diff_value   = $usd_total - ( @starting_quot + ( @starting_base * @ticker['price'].to_f ) )
						$usd_start_diff_percent = ($usd_start_diff_value / $usd_total) * 100

						# Post Balances Tweet
						tweet  = "Account Balances after trade:\n\n"
						tweet << "BTC: %0.8f\n(%+0.8f / %+0.2f%%)\n\n"     % [ @btc_balance, $btc_diff_value, $btc_diff_percent ]
						tweet << "USD: $%0.2f\n($%+0.2f / %+0.2f%%)\n\n" % [ @usd_balance, $usd_diff_value, $usd_diff_percent ]
						tweet << "Total Account Value:\n\n"
						tweet << "BTC: %0.8f\n(%+0.8f / %+0.2f%%)\n\n"     % [ $btc_total, $btc_start_diff_value, $btc_start_diff_percent ]
						tweet << "USD: $%0.2f\n($%+0.2f / %+0.2f%%)\n\n"  % [ $usd_total, $usd_start_diff_value, $usd_start_diff_percent ]
						tweet << "Current BTC/USD Spot: $%s"            % @ticker['price']
						self.tweet( tweet, in_reply_to_status_id: @persist[:lasttweet].id )

						# Wait at least one minute since last operation
						sleep 60 if ! SPEEDMODE
					else
						if @persist[:lastmin] != $minute
							@persist[:dots] = ""
						else
							@persist[:dots] << "."
						end 
						self.save_state

						if VERBOSITY >= 2
							printf("\rWaiting until minute 55... (Current minute: %02d) %s          ", $minute, @persist[:dots])
							STDOUT.flush
							sleep 0.05
						end
					end
				end # case when 55
			end # While loop
		rescue => e
			message = "ERROR: %s (exiting...)" % e.message
			Syslog.err( message )
			puts message if VERBOSITY >= 2
			puts e.backtrace if $DEBUG
			self.shutdown
			exit
		end # def start
end # Class TCTBot

# Create TCTBot instance
tctb = TCTBot.new

# Start TCTBot
tctb.start
